// Place your settings in this file to overwrite default and user settings.
{
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "eslint.validate": ["javascript", "typescript"],
  "editor.autoClosingOvertype": "auto",
  "editor.autoClosingQuotes": "always",
  // Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
  "explorer.compactFolders": true,
  // Controls whether the explorer should ask for confirmation when deleting a file via the trash.
  "explorer.confirmDelete": true,
  // Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
  "explorer.confirmDragAndDrop": true,
  // Controls whether file decorations should use badges.
  "explorer.decorations.badges": true,
  // Controls whether file decorations should use colors.
  "explorer.decorations.colors": true,
  // Controls whether the explorer should allow to move files and folders via drag and drop.
  "explorer.enableDragAndDrop": true,
  // Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste.
  //  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number
  //  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number
  "explorer.incrementalNaming": "simple",
  // Controls how lines should wrap.
  //  - off: Lines will never wrap.
  //  - on: Lines will wrap at the viewport width.
  //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
  //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
  "editor.wordWrap": "off",
  // Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
  "editor.wordWrapColumn": 80,
  // Controls the indentation of wrapped lines.
  //  - none: No indentation. Wrapped lines begin at column 1.
  //  - same: Wrapped lines get the same indentation as the parent.
  //  - indent: Wrapped lines get +1 indentation toward the parent.
  //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
  "editor.wrappingIndent": "same",
  // Controls the algorithm that computes wrapping points.
  //  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
  //  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
  "editor.wrappingStrategy": "simple",
  // Controls whether suggestions should automatically show up when typing trigger characters.
  "editor.suggestOnTriggerCharacters": true,
  // Controls how suggestions are pre-selected when showing the suggest list.
  //  - first: Always select the first suggestion.
  //  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
  //  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
  "editor.suggestSelection": "recentlyUsed",
  // Enables tab completions.
  //  - on: Tab complete will insert the best matching suggestion when pressing tab.
  //  - off: Disable tab completions.
  //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
  "editor.tabCompletion": "off",
  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 2,
  // Controls whether suggestions should automatically show up while typing.
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": false
  },
  // Controls whether the editor should detect links and make them clickable.
  "editor.links": true,
  // Highlight matching brackets.
  "editor.matchBrackets": "always",
  // Controls whether the minimap is shown.
  "editor.minimap.enabled": true,
  // Limit the width of the minimap to render at most a certain number of columns.
  "editor.minimap.maxColumn": 120,
  // Controls the rendering mode of the minimap.
  //  - actual: The minimap will be displayed in its original size, so it might be higher than the editor.
  //  - cover: The minimap will always have the height of the editor and will stretch or shrink as necessary.
  //  - contain: The minimap will shrink as necessary to never be higher than the editor.
  "editor.minimap.mode": "actual",
  // Render the actual characters on a line as opposed to color blocks.
  "editor.minimap.renderCharacters": true,
  // Scale of content drawn in the minimap.
  "editor.minimap.scale": 1,
  // Controls when the minimap slider is shown.
  "editor.minimap.showSlider": "mouseover",
  // Controls the side where to render the minimap.
  "editor.minimap.side": "right",
  // Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
  //  - none: The editor will not insert indentation automatically.
  //  - keep: The editor will keep the current line's indentation.
  //  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
  //  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
  //  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
  "editor.autoIndent": "full",
  // Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
  "editor.detectIndentation": true,
  // Controls whether copying without a selection copies the current line.
  "editor.emptySelectionClipboard": false,
  // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
  "editor.formatOnPaste": true,
  // Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
  "editor.formatOnSave": true,
  // Controls whether the editor should automatically format the line after typing.
  "editor.formatOnType": false,
  // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.insertSpaces": false,
  // Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
  "files.enableTrash": true,
  // The default character set encoding to use when reading and writing files. This setting can also be configured per language.
  "files.encoding": "utf8",
  // The default end of line character.
  //  - \n: LF
  //  - \r\n: CRLF
  //  - auto: Uses operating system specific end of line character.
  "files.eol": "\n",
  "[javascript]": {
    "editor.formatOnSave": false,
    "editor.formatOnPaste": false
  },
  "[typescript]": {
    "editor.formatOnSave": true,
    "editor.formatOnPaste": false
  },
  "[markdown]": {
    "editor.formatOnSave": false,
    "editor.wordWrap": "on",
    "editor.renderWhitespace": "all",
    "editor.acceptSuggestionOnEnter": "off"
  },
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "**/dist": true,
    "**/coverage": true
  },
  "typescript.referencesCodeLens.enabled": true,
  "appService.zipIgnorePattern": [".vscode{,/**}"],
  "appService.deploySubpath": "",
  "javascript.preferences.quoteStyle": "single",
  "typescript.preferences.quoteStyle": "single",
  "prettier.singleQuote": true
}
